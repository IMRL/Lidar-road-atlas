/*
    This file is part of Corrade.

    Copyright © 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016,
                2017, 2018, 2019, 2020, 2021, 2022
              Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Corrade {
/** @page interconnect Signals and slots
@brief Easy-to-use API to connect listeners to events.

@tableofcontents
@m_footernavigation

Signal and slots are a technique introduced in Qt, which allows to intuitively
pass events to arbitrary objects and methods without unnecessary boilerplate
code (such as various `EventListener` interfaces in Java).

Basically there is an emitter with special functions called signals. Each
signal function can have an arbitrary number of parameters. The signals are
connected to slots, which can be either free functions, member functions or
lambdas with the same argument list. When the emitter emits signal, all
slots connected to it are called and signal arguments are passed to them.

The signal/slot connection is automatically removed when either emitter or
(when the signal is connected to member function) receiver object is
destroyed. The connection can be removed also explicitly --- you can remove
one particular connection, all connections to given slot or all connections
to given object.

@section interconnect-signals Implementing signals

Signals are implemented in some @ref Interconnect::Emitter subclass as public
functions with @ref Interconnect::Emitter::Signal "Signal" as return type.
There are no limitations on argument types or argument count. The signal
function calls @ref Interconnect::Emitter::emit() "emit()" internally, passes
its own signature and all arguments to it and propagates the returned value.

@dontinclude interconnect/main.cpp
@skip class RemoteControl
@until };

@section interconnect-slots Implementing slots

Any free function, lambda function or non-constant member function returning
@cpp void @ce can be connected to any signal if both have the same argument
count and types. If connecting to a member function, you have to derive your
class from @ref Interconnect::Receiver to ensure that the connection is
automatically removed when receiver is destroyed.

@skip class Bomb
@until };
@until }
@until }
@until }
@until }

@section interconnect-connecting Connecting signals to slots

Once you have instances of emitter and receiver objects, you can connect
signals from emitters to slots. There are no connectivity limitations, you can
connect any number of signals to one slot and any number of slots to one
signal. See @ref Interconnect::connect() for more information about how to
manage the connections.

@skip int main
@until bombs

See @ref Interconnect::disconnect(),
    @ref Interconnect::Emitter::disconnectSignal(),
    @ref Interconnect::Emitter::disconnectAllSignals() and
    @ref Interconnect::Receiver::disconnectAllSlots() functions for information
    about removing connections.

@section interconnect-emitting Emitting signals

The implemented signal can be emitted simply by calling the function.

@skip rc.trigger
@until }
@until }
@until }

@section interconnect-compiling Compiling and running the example

After a successful compilation the application will print out this text:

@code{.shell-session}
$ ./interconnect
Successfully installed 3 bombs.
Launching bomb in 60 seconds.
Launching bomb in 60 seconds.
Launching bomb in 60 seconds.
Mission succeeded!
@endcode

See the whole example below. The example is also in the
[GitHub repository](https://github.com/mosra/corrade/tree/master/src/examples/interconnect).

-   @ref interconnect/CMakeLists.txt "CMakeLists.txt"
-   @ref interconnect/main.cpp "main.cpp"

@example interconnect/CMakeLists.txt @m_examplenavigation{interconnect,interconnect/} @m_footernavigation
@example interconnect/main.cpp @m_examplenavigation{interconnect,interconnect/} @m_footernavigation

*/
}
